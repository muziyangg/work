[{"content":"‍\ntitle: 功能对应路径\nslug: 功能对应路径 20250110002410\ndescription:\ndate: 2025-01-10\nlastmod: 2025-01-10\nimage: /img/title.jpg\nmath:\nlicense:\nhidden: false\ndraft: false\npassword:\ncategories: [\u0026quot;\u0026quot;]\ntags: [\u0026quot;\u0026quot;]\n结果异常改变打印颜色 HIS.DHCReportPrint\n在此处添加异常结果信息\n更新模板所有字段 HIS.DHCReportPrintBase\nlis 设置默认打印机 HIS.DHCReportPrintBarCode\n1.设置打印机名称为 tiaoma\n2.创建打印机副本命名为条码\n3.修改代码默认打印机名称\n模板设计器增加可用元素 HIS.DHCReportPrint // 添加可用参数\nHIS.DHCReportPrintBase //更新 global\n初始化字符串位置\n拼接 RetStr 字符串\n保存标本登记存储过程 LISSP.DHCRPVisitNumber\n接收用户提示不存在\n自动任务（lis 和 his 信息同步，拒收） win服务器版本lis，【dhc-app】web.DHCLisRealTimeInterface\nlinux服务器版本lis，【dhc-lisdata】LISAPP.TASK.LisRealTimeInterface\nTASK.LisRealTimeInterface\nw ##Class(TASK.LISRealTimeTask).Do()\n#\n同步 his 数据 LIS.Util.SyncData\n同步病区和科室数据，利用sql进行数据同步\n标本接收核收 （LISSP.DHCRPVisitNumber).ReceiveVisitNumber\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 Param.P0 C:集中接收 H:核收 Param.P1检测号(流水号/条码号) Param.P2细菌鉴定号 Param.P3流水号 Param.P4核收者 Param.P5接收备注ReceiveNotes Param.P6接收质量SpecimenQualityDR Param.P7接收医嘱列表VisTSDRLists Param.P8工作小组idWorkGroupMachineDR Param.P9 CarryUserDR Param.P10接收时间TransmitDate Param.P11 CheckTestSetDRList Param.P12 RackNo Param.P13接收IP Param.P14 ExParaList 格式：送达人信息@ w ##Class(LISSP.DHCRPVisitNumber).ReceiveVisitNumber(\u0026#34;1000253031\u0026#34;,\u0026#34;\u0026lt;Data\u0026gt;\u0026lt;P11\u0026gt;@\u0026lt;/P11\u0026gt;\u0026lt;P5\u0026gt;\u0026lt;/P5\u0026gt;\u0026lt;P14\u0026gt;@\u0026lt;/P14\u0026gt;\u0026lt;P6\u0026gt;\u0026lt;/P6\u0026gt;\u0026lt;P12\u0026gt;\u0026lt;/P12\u0026gt;\u0026lt;P13\u0026gt;10.20.25.174\u0026lt;/P13\u0026gt;\u0026lt;P0\u0026gt;H\u0026lt;/P0\u0026gt;\u0026lt;P9\u0026gt;\u0026lt;/P9\u0026gt;\u0026lt;P1\u0026gt;\u0026lt;/P1\u0026gt;\u0026lt;P3\u0026gt;22\u0026lt;/P3\u0026gt;\u0026lt;P2\u0026gt;\u0026lt;/P2\u0026gt;\u0026lt;P7\u0026gt;\u0026lt;/P7\u0026gt;\u0026lt;P10\u0026gt;2023-08-23\u0026lt;/P10\u0026gt;\u0026lt;P8\u0026gt;6\u0026lt;/P8\u0026gt;\u0026lt;P4\u0026gt;11627\u0026lt;/P4\u0026gt;\u0026lt;/Data\u0026gt;\u0026#34;,\u0026#34;11627^4^0^13^1\u0026#34;) BS 标本接收 HIS.DHCReceiveWebService——ReceiveAllHIS\nHIS.DHCReceiveProcess——ReceiveAllBS\nHIS.DHCReceiveCommon——CheckSampleInfo\n标本审核 w ##Class(LISSP.DHCRPVisitNumberReport).SaveResult(\u0026ldquo;2507\u0026rdquo;,\u0026quot; A ^^^^^81^^^^^^^^^ 127.0.0.1 611^^1017^^测试^^^^^^^^A^^^^*10~9/L^^^^4^^^^^^2017-11-01^^09:02:32^^1^^^^^^^^^^^^^^^^^^2507@@ \u0026ldquo;,\u0026rdquo; 11327^^21 \u0026ldquo;)\n微生物审核 LIS.WS.BLL.DHCRPMicReportSave\n/// w ##Class(IDP.WS.BLL.DHCIDPResult).EndIDPReportMTHD(\u0026ldquo;1597887@715\u0026rdquo;, \u0026ldquo;3\u0026rdquo;, \u0026ldquo;\u0026rdquo;, \u0026ldquo;8280\u0026rdquo;, \u0026ldquo;11521\u0026rdquo;, \u0026ldquo;\u0026rdquo;, \u0026ldquo;\u0026rdquo;, \u0026ldquo;\u0026rdquo;, \u0026ldquo;\u0026rdquo;, \u0026ldquo;\u0026rdquo;, \u0026ldquo;\u0026rdquo;, \u0026ldquo;\u0026rdquo;, \u0026ldquo;\u0026rdquo;, \u0026ldquo;\u0026rdquo;, \u0026ldquo;1159540161\u0026rdquo;)\n保存条码医嘱信息 HIS.DHCReceiveCommon——SaveLabNoTSInfo\n//签收生成上传信息\n报告处理页面功能 (检验)LIS.WS.BLL.DHCRPReportManage.QryWorkList\n(微生物)LIS.WS.BLL.DHCRPMicNumberReport.QryLabInformatin\n参考范围方法 LISSP.BLL.DHCCommonInterface\n保存标本登记存储过程 LISSP.DHCRPVisitNumber\n首页功能显示 LISSTAT.LIS.QryST.HomePage\n报告查询 老 LIS.WS.BLL.DHCRPQueryReport\n新 LIS.WS.BLL.DHCReportQuery\n新 LIS.WS.BLL.DHCLISReportPrint\t自助程序\n标本状态查询 LIS.WS.BLL.DHCStatSample\n输血打印 申请单 HIS.DHCReportPrintReqForm\n发血单 HIS.DHCReportPrintXM\n审批单 HIS.DHCBDPrintBigReqform\n配血单 HIS.DHCReportPrintXMMethod\n取血单 HIS.DHCReportPrintTakeRecordPack\n服务器问题弹窗 LIS.WS.DHCLISServiceBase\n获取工作小组最大流水号 w ##class(LISSP.DHCRPVisitNumberReport).GetMaxEpisodeNo(\u0026ldquo;12\u0026rdquo;)\n通过编号规则获取流水号 编号规则面向所有需要编号的业务提供服务，只需要维护规则业务调用接口得到编号即可，走号不与业务耦合 调用接口, 通过规则主键得到下一号: w ##class(LIS.WS.BLL.DHCLISRuleNo).GetNextNoByRowIDMTHD(\u0026ldquo;1\u0026rdquo;) 调用接口, 通过规则代码得到下一号: w ##class(LIS.WS.BLL.DHCLISRuleNo).GetNextNoByCodeMTHD(\u0026ldquo;001\u0026rdquo;, \u0026ldquo;\u0026rdquo;) 调用接口, 取消号的使用释放可用号: w ##class(LIS.WS.BLL.DHCLISRuleNo).CancelNoUse(\u0026rdquo;\u0026quot;, \u0026ldquo;\u0026quot;)或 CancelNoUseByRowIDMTHD(\u0026rdquo;\u0026quot;, \u0026ldquo;\u0026rdquo;)\n自动核收方法 w ##Class(LIS.Common.DHCVisitNumber).ReceiveLabNoByWGMWithMsg(\u0026ldquo;4\u0026rdquo;, \u0026ldquo;1000100975\u0026rdquo;, \u0026ldquo;\u0026rdquo;)\n///标本核收 s retVal =$$ReceiveLabno^MI.MIF000(mi, epis, RackNo) i retVal\u0026rsquo;= 1 Quit\n检验公共消息接口 d ##Class(TASK.LISRealTimeTask).Do()\n检验仪器自启任务 d ##Class(MI.Common.MachineControl).StartAll()\n主动上传方法 复查 LIS.Common.DHCVisitNumber\u0026ndash;CreateUploadRecordMTHD\n拒收 LISSP.DHCRPVisitNumber\u0026ndash;RejectVisitNumber\n外送方法 LIS.Service.ENS.SaveReport\n查询 his 用户信息 LIS.WS.BLL.HISSSUser\n根据就诊号, 化验项目, 审核日期查询对照码结果 web.DHCENS.STBLL.Method.GetResult\n标本状态查询 d ##Class(%ResultSet).RunQuery(\u0026ldquo;LIS.WS.BLL.DHCStatSample\u0026rdquo;, \u0026ldquo;QryStatSample\u0026rdquo;, \u0026ldquo;\u0026rdquo;, \u0026ldquo;\u0026rdquo;, \u0026ldquo;9000000762\u0026rdquo;, \u0026ldquo;\u0026rdquo;, \u0026ldquo;\u0026rdquo;, \u0026ldquo;\u0026rdquo;, \u0026ldquo;\u0026rdquo;, \u0026ldquo;\u0026rdquo;, \u0026ldquo;\u0026rdquo;, \u0026ldquo;\u0026rdquo;, \u0026ldquo;\u0026rdquo;, \u0026ldquo;\u0026rdquo;, \u0026ldquo;20\u0026rdquo;, \u0026ldquo;1\u0026rdquo;, \u0026ldquo;11370121\u0026rdquo;)\n回退拒收标本 w ##Class(LISSP.DHCRPVisitNumber).RejectVisitNumber(\u0026ldquo;00000000574\u0026rdquo;, \u0026ldquo; 5 ​\u0026lt;/P2\u0026gt;​ ​\u0026lt;P10\u0026gt;​ ​\u0026lt;/P10\u0026gt;​ ​\u0026lt;P11\u0026gt;​ ​\u0026lt;/P11\u0026gt;​ ​\u0026lt;P13\u0026gt;​ ​\u0026lt;/P13\u0026gt;​ ​\u0026lt;P4\u0026gt;​ ​\u0026lt;/P4\u0026gt;​ ​\u0026lt;P14\u0026gt;​ ​\u0026lt;/P14\u0026gt;​ ​\u0026lt;P0\u0026gt;​ 19 ​\u0026lt;/P0\u0026gt;​ ​\u0026lt;P1\u0026gt;​ ​\u0026lt;/P1\u0026gt;​ ​\u0026lt;P9\u0026gt;​ ​\u0026lt;/P9\u0026gt;​ ​\u0026lt;P7\u0026gt;​ ​\u0026lt;/P7\u0026gt;​ ​\u0026lt;P5\u0026gt;​ 113.140.81.66 ​\u0026lt;/P5\u0026gt;​ ​\u0026lt;/Data\u0026gt;​\u0026quot;, \u0026quot;1137012^1\u0026rdquo;)\nHIS 导入数据 DHCLIS.DHCBTData\n查询仪器监控数据 \u0026ldquo;LIS.WS.BLL.DHCMachineParameter\u0026rdquo;, \u0026ldquo;QryMachineTransferResult\u0026rdquo;\n^TMPMACHRESULT(MachID, SttDate),-1)\n标本核收界面通过登记号查询信息 /// d ##Class(%ResultSet).RunQuery(\u0026ldquo;LIS.WS.BLL.DHCHisOrderItem\u0026rdquo;, \u0026ldquo;QryHisOrderItemListByRegNo\u0026rdquo;, \u0026ldquo;0000000006\u0026rdquo;, \u0026ldquo;13\u0026rdquo;, \u0026ldquo;\u0026rdquo;, \u0026ldquo;\u0026rdquo;, \u0026ldquo;\u0026rdquo;, \u0026ldquo;\u0026rdquo;, \u0026ldquo;\u0026rdquo;, \u0026ldquo;\u0026rdquo;, \u0026ldquo;\u0026rdquo;, \u0026ldquo;\u0026rdquo;, \u0026ldquo;\u0026rdquo;, \u0026ldquo;\u0026rdquo;, \u0026ldquo;\u0026rdquo;, \u0026ldquo;\u0026rdquo;, \u0026ldquo;82803021\u0026rdquo;)\n基础数据查询公用方法 LIS.WS.BLL.DHCLISBaseCore\n推送 otmsg 消息 LISSP.BLL.DHCOTMsgStock\t微生物审核调用\nLISSP.BLL.DealMsgQueue\t普通审核调用\n定时任务 【dhc-app】web.DHCLisRealTimeInterface\nd ##Class(LIS.WS.DHCLISServiceBase).ManaInvoke(\u0026ldquo;TASK.LISRealTimeTask\u0026rdquo;, \u0026ldquo;Do\u0026rdquo;) 新\n报表授权 zn \u0026ldquo;%sys\u0026rdquo;\nd ##class(BSP.SMP.DHCManageRolesAndUsers).GrantRolesSQLPrivilege()\n保存危急值处理消息 w ##Class(DHCLIS.DHCCommon).SaveTransPanicNotice(37, \u0026ldquo;01697\u0026rdquo;, \u0026ldquo;fasf231312^afdafsa\u0026rdquo;, \u0026ldquo;\u0026rdquo;)\n通用根据条件query查询数据 LISSTAT.LIS.ComQuery.Condition\n检验自助打印机查询 LIS.WS.BLL.DHCSelfPrint\n标本追踪获取信息 LIS.WS.BLL.DHCTraceReport\tQryVisitnumberInfo\n质量指标汇总数据生成 d ##Class(LISSTAT.LIS.QSI.CreatDataBS).Creat(\u0026ldquo;2018-01-01\u0026rdquo;,\u0026ldquo;2019-07-01\u0026rdquo;,\u0026ldquo;AUTHDATE\u0026rdquo;)\n工作量统计 d ##Class(%ResultSet).RunQuery(\u0026ldquo;LIS.WS.BLL.DHCStatWorkLoadByTestCode\u0026rdquo;,\u0026ldquo;QryVisitnumberWorkLoadNew\u0026rdquo;,\u0026ldquo;2025-04-02\u0026rdquo;,\u0026ldquo;2025-04-02\u0026rdquo;,\u0026ldquo;4\u0026rdquo;,\u0026ldquo;48\u0026rdquo;,\u0026quot;\u0026quot;,\u0026quot;;;;;;;\u0026quot;,\u0026ldquo;0\u0026rdquo;,\u0026ldquo;Machine,TestCode\u0026rdquo;,\u0026quot;^^^00:0023:59\u0026quot;,\u0026quot;\u0026quot;,,\u0026quot;\u0026quot;,\u0026ldquo;20\u0026rdquo;,\u0026ldquo;1\u0026rdquo;,\u0026ldquo;947340131\u0026rdquo;)\n判断用户权限 i ##class(LISSTAT.LIS.ComClass.Permission).Sessions(Sessions,WorkGpDR) q\n索引格式化 ##Class(LIS.Util.Common).IndexData(TSetCode)\n查询质控数据 d ##class(%ResultSet).RunQuery(\u0026ldquo;LIS.WS.BLL.DHCQCCalXSD\u0026rdquo;,\u0026ldquo;QryCalTestResultMonthData\u0026rdquo;,\u0026ldquo;20250701\u0026rdquo;,\u0026ldquo;20250731\u0026rdquo;,\u0026ldquo;20\u0026rdquo;,\u0026ldquo;1\u0026rdquo;,\u0026ldquo;16\u0026rdquo;,\u0026ldquo;12\u0026rdquo;,\u0026quot;\u0026quot;,12,\u0026ldquo;1\u0026rdquo;,735374452,\u0026quot;\u0026quot;,\u0026quot;\u0026quot;)\n杀死进程 结束指定进程号的进程\n/// w ##Class(LIS.WS.DHCLISServiceBase).KillJobByID()\n接收查询his返回 s RetVal=##class(LISAPP.LIS.BLL.DHCReceiveInterface).GetLabNoInfo(BarCode)\n报告查询查看详细结果 QryTSInfoAExecute+85^LIS.WS.BLL.DHCRPVisitNumberReport.1\n获取电子病历信息 w ##class(LIS.WS.BLL.DHCEMRView).GetEmrAddrMTHD(\u0026ldquo;25072800014\u0026rdquo;)\n","date":"2025-09-03T00:00:00Z","image":"https://work.717170.xyz/p/%E5%8A%9F%E8%83%BD%E5%AF%B9%E5%BA%94%E8%B7%AF%E5%BE%84-bd31d1cf45/assets/image-20230327182228977-20241227020427-8nbvjef_hu_4be4909f822ffffb.png","permalink":"https://work.717170.xyz/p/%E5%8A%9F%E8%83%BD%E5%AF%B9%E5%BA%94%E8%B7%AF%E5%BE%84-bd31d1cf45/","title":"功能对应路径"},{"content":"‍\n‍\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 Class MI.Special.Record Extends %RegisteredObject { /// 记录临时数据 /// 入参:数据类型，数据索引，数据，类型（1天数,0数字），限制天数/数字 /// w ##class(MI.Special.Record).RecordData(\u0026#34;TEST\u0026#34;,\u0026#34;9000000001\u0026#34;,\u0026#34;testdata\u0026#34;,0,5) ClassMethod RecordData(DataType, DataIndex, Data, InfoType, InfoLimit) { s DataIndex=$g(DataIndex),Data=$g(Data),InfoLimit=$g(InfoLimit),DataType=$g(DataType),InfoType=$g(InfoType) i \u0026#39;$l(DataIndex) q \u0026#34;\u0026#34; i \u0026#39;$l(InfoType) s InfoType=1\t// 没有存储类型默认为按照天数 i (\u0026#39;$l(DataType))\u0026amp;\u0026amp;(InfoType=1) s DataType=\u0026#34;TMPDATA\u0026#34;\t// 天数没有数据类型索引默认为 TMPDATA i (\u0026#39;$l(DataType))\u0026amp;\u0026amp;(InfoType=0) s DataType=\u0026#34;TMPNUM\u0026#34;\t// 数字没有数据类型索引默认为 TMPNUM i (\u0026#39;$l(InfoLimit))\u0026amp;\u0026amp;(InfoType=1) s InfoLimit=5\t// 天数没有数据限制默认为 5 i (\u0026#39;$l(InfoLimit))\u0026amp;\u0026amp;(InfoType=0) s InfoLimit=1000\t// 数字没有数据限制默认为 1000 s InfoDate=$zd($p($h,\u0026#34;,\u0026#34;,1),8) s InfoTime=$tr($zt($p($h,\u0026#34;,\u0026#34;,2)),\u0026#34;:\u0026#34;,\u0026#34;\u0026#34;) s sign=0,OutPutSign=1,QSign=0,DataSign=1 //包含数据,是否输出,是否新增 i InfoType=1 d SaveDate i InfoType=0 d SaveNum i InfoType=1 d DeleteDate i InfoType=0 d DeleteNum q \u0026#34;\u0026#34; DeleteNum i \u0026#39;$d(^dbo.LISRecordI(\u0026#34;IndexInfoNum\u0026#34;,DataType)) q s LastInfoNum=+$o(^dbo.LISRecordI(\u0026#34;IndexInfoNum\u0026#34;,DataType,\u0026#34;\u0026#34;),-1) i LastInfoNum\u0026lt;=0 q\t//如果为空获取为负数时退出 s LastNextInfoNum=LastInfoNum-InfoLimit s LastNextNextInfoNum=+$o(^dbo.LISRecordI(\u0026#34;IndexInfoNum\u0026#34;,DataType,LastNextInfoNum),-1) i LastNextNextInfoNum\u0026lt;=0 q\t//如果为空获取为负数时退出 s DeleteNum=LastNextInfoNum f s DeleteNum=$o(^dbo.LISRecordI(\u0026#34;IndexInfoNum\u0026#34;,DataType,DeleteNum),-1) q:(DeleteNum=\u0026#34;\u0026#34;)||(DeleteNum\u0026lt;0) d .s DeleteDataIndex=\u0026#34;\u0026#34; f s DeleteDataIndex=$o(^dbo.LISRecordI(\u0026#34;IndexInfoNum\u0026#34;,DataType,DeleteNum,DeleteDataIndex),-1) q:(DeleteDataIndex=\u0026#34;\u0026#34;) d ..s LISRecordDR=\u0026#34;\u0026#34; f s LISRecordDR=$o(^dbo.LISRecordI(\u0026#34;IndexInfoNum\u0026#34;,DataType,DeleteNum,DeleteDataIndex,LISRecordDR),-1) q:(LISRecordDR=\u0026#34;\u0026#34;) d ...\u0026amp;sql(delete from dbo.LIS_Record where RowID=:LISRecordDR) q DeleteDate i \u0026#39;$d(^dbo.LISRecordI(\u0026#34;IndexInfoDate\u0026#34;,DataType)) q s LastInfoDate=+$o(^dbo.LISRecordI(\u0026#34;IndexInfoDate\u0026#34;,DataType,\u0026#34;\u0026#34;),-1) i LastInfoDate\u0026lt;=0 q\t//如果为空获取为负数时退出 s LastInfoDateNum=$zdh(LastInfoDate,8) s LastNextInfoDateNum=LastInfoDateNum-InfoLimit s LastNextInfoDate=$zd(LastNextInfoDateNum,8) s LastNextNextInfoDate=+$o(^dbo.LISRecordI(\u0026#34;IndexInfoDate\u0026#34;,DataType,LastNextInfoDate),-1) i LastNextNextInfoDate\u0026lt;=0 q\t//如果为空获取为负数时退出 s DeleteDate=LastNextInfoDate f s DeleteDate=$o(^dbo.LISRecordI(\u0026#34;IndexInfoDate\u0026#34;,DataType,DeleteDate),-1) q:(DeleteDate=\u0026#34;\u0026#34;)||(DeleteDate\u0026lt;0) d .s DeleteDataIndex=\u0026#34;\u0026#34; f s DeleteDataIndex=$o(^dbo.LISRecordI(\u0026#34;IndexInfoDate\u0026#34;,DataType,DeleteDate,DeleteDataIndex),-1) q:(DeleteDataIndex=\u0026#34;\u0026#34;) d ..s LISRecordDR=\u0026#34;\u0026#34; f s LISRecordDR=$o(^dbo.LISRecordI(\u0026#34;IndexInfoDate\u0026#34;,DataType,DeleteDate,DeleteDataIndex,LISRecordDR),-1) q:(LISRecordDR=\u0026#34;\u0026#34;) d ...\u0026amp;sql(delete from dbo.LIS_Record where RowID=:LISRecordDR) q SaveNum s obj=##class(dbo.LISRecord).%New() s obj.DataType=DataType s obj.DataIndex=DataIndex s obj.Data=Data s obj.InfoType=InfoType s obj.InfoLimit=InfoLimit s obj.Sequence=\u0026#34;1\u0026#34; s obj.InfoNumDT=InfoDate_InfoTime s InfoNum=+$o(^dbo.LISRecordI(\u0026#34;IndexInfoNum\u0026#34;,DataType,\u0026#34;\u0026#34;),-1) s obj.InfoNum=+InfoNum+1 s sc=obj.%Save() q SaveDate i $d(^dbo.LISRecordI(\u0026#34;IndexMater\u0026#34;,DataType,DataIndex)) d .s OSequence=$o(^dbo.LISRecordI(\u0026#34;IndexMater\u0026#34;,DataType,DataIndex,\u0026#34;\u0026#34;),-1) .s RecordDR=$o(^dbo.LISRecordI(\u0026#34;IndexMater\u0026#34;,DataType,DataIndex,OSequence,\u0026#34;\u0026#34;),-1) .s OldData=$lg($g(^dbo.LISRecordD(RecordDR)),4) .i OldData=Data d ..s obj=##class(dbo.LISRecord).%OpenId(RecordDR) .e s obj=##class(dbo.LISRecord).%New() e s obj=##class(dbo.LISRecord).%New() s obj.DataType=DataType s obj.DataIndex=DataIndex s obj.Data=Data s obj.InfoType=InfoType s obj.InfoLimit=InfoLimit s obj.InfoDate=InfoDate s obj.InfoTime=InfoTime i \u0026#39;$d(^dbo.LISRecordI(\u0026#34;IndexMater\u0026#34;,DataType,DataIndex)) d .s obj.Sequence=\u0026#34;1\u0026#34; e d .s OSequence=$o(^dbo.LISRecordI(\u0026#34;IndexMater\u0026#34;,DataType,DataIndex,\u0026#34;\u0026#34;),-1) .s obj.Sequence=+OSequence+1 s sc=obj.%Save() q } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 Class MI.Special.Record Extends %RegisteredObject { /// 记录临时数据 /// 入参:数据类型，数据索引，数据，类型（1天数,0数字），限制天数/数字 /// w ##class(MI.Special.Record).RecordData(\u0026#34;TEST\u0026#34;,\u0026#34;9000000001\u0026#34;,\u0026#34;testdata\u0026#34;,0,5) ClassMethod RecordDataNew(DataType, DataIndex, Data, InfoType, InfoLimit) { s DataIndex=$g(DataIndex),Data=$g(Data),InfoLimit=$g(InfoLimit),DataType=$g(DataType),InfoType=$g(InfoType) i \u0026#39;$l(DataIndex) q \u0026#34;\u0026#34; i \u0026#39;$l(InfoType) s InfoType=1\t// 没有存储类型默认为按照天数 i (\u0026#39;$l(DataType))\u0026amp;\u0026amp;(InfoType=1) s DataType=\u0026#34;TMPDATA\u0026#34;\t// 天数没有数据类型索引默认为 TMPDATA i (\u0026#39;$l(DataType))\u0026amp;\u0026amp;(InfoType=0) s DataType=\u0026#34;TMPNUM\u0026#34;\t// 数字没有数据类型索引默认为 TMPNUM i (\u0026#39;$l(InfoLimit))\u0026amp;\u0026amp;(InfoType=1) s InfoLimit=5\t// 天数没有数据限制默认为 5\ti (\u0026#39;$l(InfoLimit))\u0026amp;\u0026amp;(InfoType=0) s InfoLimit=1000\t// 数字没有数据限制默认为 1000 s InfoDate=$zd($p($h,\u0026#34;,\u0026#34;,1),8) s InfoTime=$tr($zt($p($h,\u0026#34;,\u0026#34;,2)),\u0026#34;:\u0026#34;,\u0026#34;\u0026#34;) s sign=0,OutPutSign=1,QSign=0,DataSign=1 //包含数据,是否输出,是否新增 i InfoType=1 d SaveDate i InfoType=0 d SaveNum i InfoType=1 d DeleteDate i InfoType=0 d DeleteNum q \u0026#34;\u0026#34; DeleteNum i \u0026#39;$d(^dbo.LISRecordI(\u0026#34;IndexInfoNum\u0026#34;,DataType)) q s LastInfoNum=+$o(^dbo.LISRecordI(\u0026#34;IndexInfoNum\u0026#34;,DataType,\u0026#34;\u0026#34;),-1) i LastInfoNum\u0026lt;=0 q\t//如果为空获取为负数时退出 s LastNextInfoNum=LastInfoNum-InfoLimit s LastNextNextInfoNum=+$o(^dbo.LISRecordI(\u0026#34;IndexInfoNum\u0026#34;,DataType,LastNextInfoNum),-1) i LastNextNextInfoNum\u0026lt;=0 q\t//如果为空获取为负数时退出 s DeleteNum=LastNextInfoNum f s DeleteNum=$o(^dbo.LISRecordI(\u0026#34;IndexInfoNum\u0026#34;,DataType,DeleteNum),-1) q:(DeleteNum=\u0026#34;\u0026#34;)||(DeleteNum\u0026lt;0) d .s DeleteDataIndex=\u0026#34;\u0026#34; f s DeleteDataIndex=$o(^dbo.LISRecordI(\u0026#34;IndexInfoNum\u0026#34;,DataType,DeleteNum,DeleteDataIndex),-1) q:(DeleteDataIndex=\u0026#34;\u0026#34;) d ..s LISRecordDR=\u0026#34;\u0026#34; f s LISRecordDR=$o(^dbo.LISRecordI(\u0026#34;IndexInfoNum\u0026#34;,DataType,DeleteNum,DeleteDataIndex,LISRecordDR),-1) q:(LISRecordDR=\u0026#34;\u0026#34;) d ...\u0026amp;sql(delete from dbo.LIS_Record where RowID=:LISRecordDR) q DeleteDate i \u0026#39;$d(^dbo.LISRecordI(\u0026#34;IndexInfoDate\u0026#34;,DataType)) q s LastInfoDate=+$o(^dbo.LISRecordI(\u0026#34;IndexInfoDate\u0026#34;,DataType,\u0026#34;\u0026#34;),-1) i LastInfoDate\u0026lt;=0 q\t//如果为空获取为负数时退出 s LastInfoDateNum=$zdh(LastInfoDate,8) s LastNextInfoDateNum=LastInfoDateNum-InfoLimit s LastNextInfoDate=$zd(LastNextInfoDateNum,8) s LastNextNextInfoDate=+$o(^dbo.LISRecordI(\u0026#34;IndexInfoDate\u0026#34;,DataType,LastNextInfoDate),-1) i LastNextNextInfoDate\u0026lt;=0 q\t//如果为空获取为负数时退出 s DeleteDate=LastNextInfoDate f s DeleteDate=$o(^dbo.LISRecordI(\u0026#34;IndexInfoDate\u0026#34;,DataType,DeleteDate),-1) q:(DeleteDate=\u0026#34;\u0026#34;)||(DeleteDate\u0026lt;0) d .s DeleteDataIndex=\u0026#34;\u0026#34; f s DeleteDataIndex=$o(^dbo.LISRecordI(\u0026#34;IndexInfoDate\u0026#34;,DataType,DeleteDate,DeleteDataIndex),-1) q:(DeleteDataIndex=\u0026#34;\u0026#34;) d ..s LISRecordDR=\u0026#34;\u0026#34; f s LISRecordDR=$o(^dbo.LISRecordI(\u0026#34;IndexInfoDate\u0026#34;,DataType,DeleteDate,DeleteDataIndex,LISRecordDR),-1) q:(LISRecordDR=\u0026#34;\u0026#34;) d ...\u0026amp;sql(delete from dbo.LIS_Record where RowID=:LISRecordDR) q SaveNum s obj=##class(dbo.LISRecord).%New() s obj.DataType=DataType s obj.DataIndex=DataIndex s obj.Data=Data s obj.InfoType=InfoType s obj.InfoLimit=InfoLimit s obj.Sequence=\u0026#34;1\u0026#34; s obj.InfoNumDT=InfoDate_InfoTime s InfoNum=+$o(^dbo.LISRecordI(\u0026#34;IndexInfoNum\u0026#34;,DataType,\u0026#34;\u0026#34;),-1) s obj.InfoNum=+InfoNum+1 s sc=obj.%Save() q SaveDate i $d(^dbo.LISRecordI(\u0026#34;IndexMater\u0026#34;,DataType,DataIndex)) d .s OSequence=$o(^dbo.LISRecordI(\u0026#34;IndexMater\u0026#34;,DataType,DataIndex,\u0026#34;\u0026#34;),-1) .s RecordDR=$o(^dbo.LISRecordI(\u0026#34;IndexMater\u0026#34;,DataType,DataIndex,OSequence,\u0026#34;\u0026#34;),-1) .s OldData=$lg($g(^dbo.LISRecordD(RecordDR)),4) .i OldData=Data d ..s obj=##class(dbo.LISRecord).%OpenId(RecordDR) .e s obj=##class(dbo.LISRecord).%New() e s obj=##class(dbo.LISRecord).%New() s obj.DataType=DataType s obj.DataIndex=DataIndex s obj.Data=Data s obj.InfoType=InfoType s obj.InfoLimit=InfoLimit s obj.InfoDate=InfoDate s obj.InfoTime=InfoTime i \u0026#39;$d(^dbo.LISRecordI(\u0026#34;IndexMater\u0026#34;,DataType,DataIndex)) d .s obj.Sequence=\u0026#34;1\u0026#34; e d .s OSequence=$o(^dbo.LISRecordI(\u0026#34;IndexMater\u0026#34;,DataType,DataIndex,\u0026#34;\u0026#34;),-1) .s obj.Sequence=+OSequence+1 s sc=obj.%Save() q } /// 记录临时数据新 /// 入参:唯一入参，数据，索引，第几个数据，类型（1天数,0数字），天数/数字 /// w ##class(MI.Special.Record).RecordData(\u0026#34;\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;LSLSX\u0026#34;,0,1,5) /// try{d ##class(MI.Special.Record).RecordData(epis,recordbak,\u0026#34;MI.MIFRS600\u0026#34;,1,10)}catch{} /// d ##class(MI.Special.Record).RecordData(\u0026#34;34\u0026#34;,\u0026#34;CS\u0026#34;,\u0026#34;LSLSX\u0026#34;,0,1,2) ClassMethod RecordData(Ginseng, Data, Index, OrderNum, Type, DayNumber) { s Index=$g(Index),Ginseng=$g(Ginseng),Data=$g(Data),Type=$g(Type),DayNumber=$g(DayNumber) q ..RecordDataNew(Index,Ginseng,Data,Type,DayNumber) s Ginseng=$g(Ginseng),Data=$g(Data),DayNumber=$g(DayNumber),Index=$g(Index),Type=$g(Type),OrderNum=$g(OrderNum) i \u0026#39;$l(Ginseng) q \u0026#34;\u0026#34; i \u0026#39;$l(Type) s Type=1 i (\u0026#39;$l(Index))\u0026amp;\u0026amp;(Type=1) s Index=\u0026#34;TMPDATA\u0026#34; i (\u0026#39;$l(Index))\u0026amp;\u0026amp;(Type=0) s Index=\u0026#34;TMPNUM\u0026#34; i (\u0026#39;$l(DayNumber))\u0026amp;\u0026amp;(Type=1) s DayNumber=5 i (\u0026#39;$l(DayNumber))\u0026amp;\u0026amp;(Type=0) s DayNumber=1000 s DateTime=$zd($p($h,\u0026#34;,\u0026#34;,1),8) s sign=0,OutPutSign=1,QSign=0,DataSign=1 //包含数据,是否输出,是否新增 i $d(^LISTMPDATA(Index,Ginseng)) d .s sign=1 .i ($l(OrderNum))\u0026amp;\u0026amp;($d(^LISTMPDATA(Index,Ginseng,OrderNum))) d ..s RecordData=$o(^LISTMPDATA(Index,Ginseng,OrderNum,\u0026#34;\u0026#34;),-1) ..s OldData=$g(^LISTMPDATA(Index,Ginseng,OrderNum,RecordData)) ..s OutPut=OrderNum_\u0026#34;^\u0026#34;_OldData ..s Order=\u0026#34;\u0026#34; f s Order=$o(^LISTMPDATA(Index,Ginseng,Order)) q:(Order=\u0026#34;\u0026#34;)||(QSign=1) d ...s RecordData=$o(^LISTMPDATA(Index,Ginseng,Order,\u0026#34;\u0026#34;),-1) ...s OldData=$g(^LISTMPDATA(Index,Ginseng,Order,RecordData)) ...i OldData=Data d ....s OutPutSign=1,DataSign=0,QSign=1 ...e d ....s OutPutSign=0 .e d ..s Order=\u0026#34;\u0026#34; f s Order=$o(^LISTMPDATA(Index,Ginseng,Order)) q:(Order=\u0026#34;\u0026#34;)||(QSign=1) d ...s RecordData=\u0026#34;\u0026#34; f s RecordData=$o(^LISTMPDATA(Index,Ginseng,Order,RecordData),-1) q:(RecordData=\u0026#34;\u0026#34;)||(QSign=1) d ....s OldData=$g(^LISTMPDATA(Index,Ginseng,Order,RecordData)) ....s OutPut=Order_\u0026#34;^\u0026#34;_OldData ....i OldData=Data d .....s OutPutSign=1,DataSign=0,QSign=1 ....e d .....s OutPutSign=1,DataSign=1 i DataSign=1 d .i Type=1 d ..s RecordData=DateTime ..s ^LISTMPDATANUM(Type,Index)=RecordData .e d ..s RecordData=$i(^LISTMPDATANUM(Type,Index)) .s Order=$o(^LISTMPDATA(Index,Ginseng,\u0026#34;\u0026#34;),-1)+1 .s ^LISTMPDATA(Index,Ginseng,Order,RecordData)=Data .i OutPutSign=1 s OutPut=Order_\u0026#34;^\u0026#34;_Data s LastData=^LISTMPDATANUM(Type,Index) s Ginseng=\u0026#34;\u0026#34; f s Ginseng=$o(^LISTMPDATA(Index,Ginseng)) q:Ginseng=\u0026#34;\u0026#34; d .s Order=\u0026#34;\u0026#34; f s Order=$o(^LISTMPDATA(Index,Ginseng,Order)) q:Order=\u0026#34;\u0026#34; d ..i Type=1 d ...s LastDataNum=$zdh(LastData,8) f j=LastDataNum-DayNumber:-1 q:\u0026#39;$d(^LISTMPDATA(Index,Ginseng,Order,$zd(j,8))) d ....k ^LISTMPDATA(Index,Ginseng,Order,$zd(j,8)) ..i Type=0 f j=LastData-DayNumber:-1 q:\u0026#39;$d(^LISTMPDATA(Index,Ginseng,Order,j)) k ^LISTMPDATA(Index,Ginseng,Order,j) q OutPut } } ‍\n","date":"2025-09-03T00:00:00Z","image":"https://work.717170.xyz/img/title.jpg","permalink":"https://work.717170.xyz/p/%E8%AE%B0%E5%BD%95%E4%B8%B4%E6%97%B6%E6%95%B0%E6%8D%AE-de218cf708/","title":"记录临时数据"},{"content":" lis中维护的公式，替换肌酐的代码【AC017】\n1 $s((({PatSex}=\u0026#34;男\u0026#34;)\u0026amp;\u0026amp;(({AC017}/88.4)\u0026lt;=0.9)):(142*((({AC017}/88.4)/0.9)**(-0.302))*(0.9938**{PatAge})),(({PatSex}=\u0026#34;男\u0026#34;)\u0026amp;\u0026amp;(({AC017}/88.4)\u0026gt;0.9)):(142*((({AC017}/88.4)/0.9)**(-1.200))*(0.9938**{PatAge})),(({PatSex}=\u0026#34;女\u0026#34;)\u0026amp;\u0026amp;(({AC017}/88.4)\u0026lt;=0.7)):((142*1.012)*((({AC017}/88.4)/0.7)**(-0.241))*(0.9938**{PatAge})),(({PatSex}=\u0026#34;女\u0026#34;)\u0026amp;\u0026amp;(({AC017}/88.4)\u0026gt;0.7)):((142*1.012)*((({AC017}/88.4)/0.7)**(-1.200))*(0.9938**{PatAge})),1:\u0026#34;\u0026#34;) 最新版肾小球滤过率公式\n‍\n","date":"2025-09-03T00:00:00Z","image":"https://work.717170.xyz/p/%E8%82%BE%E5%B0%8F%E7%90%83%E6%BB%A4%E8%BF%87%E7%8E%87-27d51b55b8/assets/%E6%9C%80%E6%96%B0%E7%89%88%E8%82%BE%E5%B0%8F%E7%90%83%E6%BB%A4%E8%BF%87%E7%8E%87%E8%AE%A1%E7%AE%97%E5%85%AC%E5%BC%8F-20250305094927-44pn7ja_hu_566eb0483b315bb1.jpg","permalink":"https://work.717170.xyz/p/%E8%82%BE%E5%B0%8F%E7%90%83%E6%BB%A4%E8%BF%87%E7%8E%87-27d51b55b8/","title":"肾小球滤过率"},{"content":" 对外接口工具类\n输出XML\tQueryToXML 输出JSON\tQuery2Json Json拆数\tdealJson 读取Json\tReadJson 读取XML\tReadXML 写入超长、转换成流\tSendLongString 将query输出到CSV文件\tQuery2Csv (示例) 将数据输出到txt文件\tOutPut2TXT 写日志到文件中(可续写)\tWriteLog (示例) 读取服务器文件数据(按照txt方式读取)\tRead2TXT 获取互认数据\tGetData PDF报告转base64\tGetBase64ByDRMTHD 通用工具类\n不足N位补0\tZeroPadding 获取客户端IP\tGetOutLocalIP 获取服务器本地IP\tGetInLocalIP 获取当前命名空间物理路径\tGetNameSpacePath 获取License信息\tShowLicenseInfo 判断文件夹是否存在\tIsDirectoryExists 文件夹不存在创建文件夹\tCreateNotExistDir 获取时间多少秒之前的时间\tGetMinutesAgoTime 编程小工具\n初始化入参变量 ‍\n对外接口工具类 输出XML\tQueryToXML 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 /// ============================输出XML============================/// /// query 转换为xml方法 /// w ##class(V.TEST.Special).QueryToXML(\u0026#34;20201120\u0026#34;,\u0026#34;20201120\u0026#34;) ClassMethod QueryToXML(SttDate, EndDate) { s QueryName=\u0026#34;LISService.Problem.SXCZ.QryMethod:QryMethod\u0026#34; Set rsetNew = ##class(%ResultSet).%New(QueryName) /* s ClassName=\u0026#34;LISService.Problem.SXCZ.QryMethod\u0026#34; s FuncName=\u0026#34;QryMethod\u0026#34; s rsetNew=##class(%XML.DataSet).%New() s rsetNew.ClassName = ClassName s rsetNew.QueryName = FuncName */ Set sc = rsetNew.Execute(SttDate, EndDate) s colCount=rsetNew.GetColumnCount() s OutPut=\u0026#34;\u0026#34; While (rsetNew.Next()) { s RequestXML=##class(LIS.Util.COM.XML).New(\u0026#34;Request\u0026#34;) s HeaderXML=##class(LIS.Util.COM.XML).New(\u0026#34;Header\u0026#34;) s HeaderXML.SourceSystem=\u0026#34;LIS\u0026#34; s HeaderXML.MessageID=\u0026#34;1\u0026#34; d RequestXML.Insert(HeaderXML) s BodyXML=##class(LIS.Util.COM.XML).New(\u0026#34;Body\u0026#34;) s LISReportInfoXML=##class(LIS.Util.COM.XML).New(\u0026#34;LISReportInfo\u0026#34;) s LISItemResultListXML=##class(LIS.Util.COM.XML).New(\u0026#34;LISItemResultList\u0026#34;) s LISItemSenResultListXML=##class(LIS.Util.COM.XML).New(\u0026#34;LISItemSenResultList\u0026#34;) s LISItemResRstXML=##class(LIS.Util.COM.XML).New(\u0026#34;LISItemResRst\u0026#34;) s XMLFlag=0 f i=1:1:colCount { s colName=rsetNew.GetColumnName(i) s colValue=rsetNew.GetDataByName(colName) if colName=\u0026#34;LISReportInfo\u0026#34; s XMLFlag=1 if colName=\u0026#34;LISItemResultList\u0026#34; s XMLFlag=2 if colName=\u0026#34;LISItemSenResultList\u0026#34; s XMLFlag=3 if colName=\u0026#34;LISItemResRst\u0026#34; s XMLFlag=4 if XMLFlag=1,colName\u0026#39;=\u0026#34;LISReportInfo\u0026#34;{ d LISReportInfoXML.Set(colName,colValue) } if XMLFlag=2,colName\u0026#39;=\u0026#34;LISItemResultList\u0026#34;{ d LISItemResultListXML.Set(colName,colValue) } if XMLFlag=3,colName\u0026#39;=\u0026#34;LISItemSenResultList\u0026#34;{ d LISItemSenResultListXML.Set(colName,colValue) } if XMLFlag=4,colName\u0026#39;=\u0026#34;LISItemResRst\u0026#34;{ d LISItemResRstXML.Set(colName,colValue) } } d BodyXML.Insert(LISReportInfoXML) d BodyXML.Insert(LISItemResultListXML) d BodyXML.Insert(LISItemSenResultListXML) d BodyXML.Insert(LISItemResRstXML) d RequestXML.Insert(BodyXML) s OutPut=RequestXML.ToXMLStream() } q OutPut } 输出JSON\tQuery2Json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 /// ============================输出JSON============================/// /// 描述: 将query转换为json /// 编写者： yanghaoran /// 编写日期: 20241030 /// 入参：\tclassName:类名,queryName:query方法名,arg...:可以包含多个参数 /// 出参: /// d ##class(LISService.DataShare.LISTool).Query2Json(\u0026#34;LISService.DataShare.LISData\u0026#34;,\u0026#34;Data\u0026#34;) ClassMethod Query2Json(className, queryName, arg...) { s array = [] s rs = ##class(%ResultSet).%New() s rs.ClassName = className s rs.QueryName = queryName d rs.Execute(arg...) s array = [] #; 属性值 while (rs.Next()) { s valStr = \u0026#34;\u0026#34; s obj = {} for i = 1 : 1 : rs.GetColumnCount(){ s columnName = rs.GetColumnName(i) s val = rs.Data(columnName) d obj.%Set(columnName, val) } d array.%Push(obj) } q array.%ToJSON() } Json拆数\tdealJson 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 /// json拆数 /// d ##class(V.TEST.Special).dealJson() ClassMethod dealJson() { s MaxLen=3\t// 最大数组 s json=##class(V.TEST.Special).QueryToJson(\u0026#34;20201120\u0026#34;,\u0026#34;20201120\u0026#34;) set obj = ##class(%DynamicAbstractObject).%FromJSON(json) s objLen=obj.%Size() s CirNum=$p((objLen+1)/MaxLen,\u0026#34;.\u0026#34;,1) for i=0:1:CirNum d .s Array=[] .s jMaxLen=i*MaxLen .for j=jMaxLen:1:jMaxLen+MaxLen-1 d ..i j\u0026gt;(objLen-1) q ..d Array.%Push(obj.%Get(j)) .s Arraystr=Array.%ToJSON() .//放置调用方法 q } 读取Json\tReadJson 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 /// ============================读取JSON============================/// ClassMethod ReadJson() { s ParamObj={}.%FromJSON(Params) s objItems=##class(LIS.Util.COM.JSONUtils).%New().FromJSON(Param) /*\t//编写Json S Main={} s Main.\u0026#34;receivestatus\u0026#34;=ResultCode s Date=$h s Main.\u0026#34;receivedate\u0026#34;=$tr($zd($p(Date,\u0026#34;,\u0026#34;,1),3),\u0026#34;-\u0026#34;,\u0026#34;.\u0026#34;) s Main.\u0026#34;receivetime\u0026#34;=$tr($zd($p(Date,\u0026#34;,\u0026#34;,1),3),\u0026#34;-\u0026#34;,\u0026#34;.\u0026#34;)_\u0026#34; \u0026#34;_$zt($p(Date,\u0026#34;,\u0026#34;,2),1) s Main.\u0026#34;labno\u0026#34;=Labno set OutStr=Main.%ToJSON() */ } 读取XML\tReadXML 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 /// ============================读取XML============================/// ClassMethod ReadXML() { s obj= ##class(LIS.Util.COM.XML).FromXML(Input) /*\t//编写XML s RequestXML=##class(LIS.Util.COM.XML).New(\u0026#34;Request\u0026#34;) s OrdersXML=##class(LIS.Util.COM.XML).New(\u0026#34;Orders\u0026#34;) s objVisitNumber=##class(LIS.Util.COM.XML).New(\u0026#34;OrderList\u0026#34;) s RequestXML.ResultCode=\u0026#34;-1\u0026#34; s RequestXML.ResultContent=\u0026#34;查询标本信息失败:HIS条码信息不存在！\u0026#34; //YHR 20240410 老系统查询返回信息为空时返回 d OrdersXML.Insert(objVisitNumber) d RequestXML.Insert(OrdersXML) s RetValue=RequestXML.ToXMLStream() */ } 写入超长、转换成流\tSendLongString 1 2 3 4 5 6 7 /// ============================写入超长、转换成流============================/// ClassMethod SendLongString() { s charStream=##class(%GlobalCharacterStream).%New() d charStream.Write(\u0026#34;1\u0026#34;) q charStream } 将query输出到CSV文件\tQuery2Csv 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 /// ============================导出数据到文件============================/// /// 描述: 将query输出到CSV文件 /// 编写者： yanghaoran /// 编写日期: 20241030 /// 入参：\tclassName:类名,queryName:query方法名,filePath:输出路径 /// 出参: /// d ##class(LISService.DataShare.LISTool).Query2Csv(\u0026#34;LISService.DataShare.LISData\u0026#34;,\u0026#34;Data\u0026#34;,\u0026#34;D:\\LISDATA\\DATA\\test.csv\u0026#34;) ClassMethod Query2Csv(className, queryName, filePath) { s file = ##class(%FileCharacterStream).%New() s file.Filename = filePath s array = [] s rs = ##class(%ResultSet).%New() s rs.ClassName = className s rs.QueryName = queryName d rs.Execute(\u0026#34;2020-11-20\u0026#34;,\u0026#34;2020-11-20\u0026#34;) #; 列名 s colStr = \u0026#34;\u0026#34; for i = 1 : 1 : rs.GetColumnCount(){ s columnName = rs.GetColumnName(i) s colStr = $s(colStr = \u0026#34;\u0026#34; : columnName, 1 : colStr _ \u0026#34;,\u0026#34; _ columnName) ;b ;a101 } d file.Write(colStr) #; 属性值 while (rs.Next()) { s valStr = \u0026#34;\u0026#34; for i = 1 : 1 : rs.GetColumnCount(){ s columnName = rs.GetColumnName(i) s val = rs.Data(columnName) s valStr = $s(valStr = \u0026#34;\u0026#34; : val, 1 : valStr _ \u0026#34;,\u0026#34; _ val) } d file.Write($c(10) _ valStr) } d file.%Save() q $$$OK } /// 描述: 将query输出到CSV文件，可以入参多个参数 /// 编写者： yanghaoran /// 编写日期: 20241030 /// 入参：\tclassName:类名,queryName:query方法名,filePath:输出路径,arg...:可以包含多个参数 /// 出参: /// d ##class(YHR.OutPutTXT).Query2CsvNew(\u0026#34;LISService.DataShare.LISData\u0026#34;,\u0026#34;Data\u0026#34;,\u0026#34;D:\\LISDATA\\DATA\\test1.csv\u0026#34;,\u0026#34;2020-11-20\u0026#34;,\u0026#34;2020-11-20\u0026#34;) ClassMethod Query2CsvNew(className, queryName, filePath, arg...) { s file = ##class(%FileCharacterStream).%New() s file.Filename = filePath s array = [] s rs = ##class(%ResultSet).%New() s rs.ClassName = className s rs.QueryName = queryName d rs.Execute(arg...) #; 列名 s colStr = \u0026#34;\u0026#34; for i = 1 : 1 : rs.GetColumnCount(){ s columnName = rs.GetColumnName(i) s colStr = $s(colStr = \u0026#34;\u0026#34; : columnName, 1 : colStr _ \u0026#34;,\u0026#34; _ columnName) ;b ;a101 } d file.Write(colStr) #; 属性值 while (rs.Next()) { s valStr = \u0026#34;\u0026#34; for i = 1 : 1 : rs.GetColumnCount(){ s columnName = rs.GetColumnName(i) s val = rs.Data(columnName) s valStr = $s(valStr = \u0026#34;\u0026#34; : val, 1 : valStr _ \u0026#34;,\u0026#34; _ val) } d file.Write($c(10) _ valStr) } d file.%Save() q $$$OK } (示例) 将数据输出到txt文件\tOutPut2TXT 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 /// 描述: (示例) 将数据输出到txt文件 /// 编写者： yanghaoran /// 编写日期: 20241030 /// 入参：\t/// 出参: /// d ##class(LISService.DataShare.LISTool).OutPut2TXT() ClassMethod OutPut2TXT() { /// windows路径为 盘符+\u0026#34;\\\u0026#34; (\u0026#34;D:\\Test.txt\u0026#34;) /// Linux路径为 \u0026#34;/\u0026#34; (/dthealth/细菌导入模板.csv) s File=\u0026#34;D:\\LISDATA\\DATA\\Test.txt\u0026#34; o File:\u0026#34;WNS\u0026#34; u File w \u0026#34;123\u0026#34;_$c(13) w \u0026#34;234\u0026#34;_$c(13) w \u0026#34;111\u0026#34;_$C(9)_\u0026#34;222\u0026#34; c File Quit $$$OK } /// 描述: (示例) 将数据输出到txt文件 /// 编写者： yanghaoran /// 编写日期: 20241030 /// 入参：\t/// 出参: /// d ##class(LISService.DataShare.LISTool).OutPut2TXT() ClassMethod OutPut2TXTNew() { /// windows路径为 盘符+\u0026#34;\\\u0026#34; (\u0026#34;D:\\Test.txt\u0026#34;) /// Linux路径为 \u0026#34;/\u0026#34; (/dthealth/细菌导入模板.csv) s filePath=\u0026#34;D:\\LISDATA\\DATA\\XML.txt\u0026#34; s file = ##class(%FileCharacterStream).%New() s file.Filename = filePath s colStr=\u0026#34;CS\u0026#34; d file.Write(colStr) d file.%Save() Quit $$$OK } 写日志到文件中(可续写)\tWriteLog 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 /// 写日志到文件中 /// w ##Class(YHR.OutPutTXT).WriteLog(\u0026#34;测试\u0026#34;) /// logStr:日志串 /// logpath:日志路径，不给就由内部控制 ClassMethod WriteLog(logStr, logpath) { s logStr=$g(logStr) s logpath=$g(logpath) s IsLinux=1 i ##class(%SYSTEM.Version).GetOS()=\u0026#34;Windows\u0026#34; s IsLinux=0 //默认路径 i \u0026#39;$l(logpath) d .i IsLinux=0 d ..s logpath=\u0026#34;D:\\LISDATA\\DATA\\\u0026#34; .e d ..s logpath=\u0026#34;/\u0026#34; i \u0026#39;$d(^LogFileIndex) s ^LogFileIndex=0 s index=$g(^LogFileIndex) s logName=logpath_\u0026#34;Log\u0026#34;_index_\u0026#34;.txt\u0026#34; s file=##class(%File).%New(logName) //存在就追加 i ##class(%File).Exists(logName) d .Do file.Open(\u0026#34;AWS:/SHARED\u0026#34;) //不存在就新建 e d .Do file.Open(\u0026#34;WSN:/SHARED\u0026#34;) //日志头 s HeadStr=$zd($h,8)_\u0026#34; [\u0026#34;_$zt($p($h,\u0026#34;,\u0026#34;,2))_\u0026#34;] \u0026#34; //写日志 d file.WriteLine($zcvt(HeadStr_logStr,\u0026#34;O\u0026#34;,\u0026#34;UTF8\u0026#34;)) //判断大小 s fileSize=file.Size //文件大了就换一个 i fileSize\u0026gt;(1024*1000) d .s ^LogFileIndex=^LogFileIndex+1 d file.Close() q \u0026#34;\u0026#34; } (示例) 读取服务器文件数据(按照txt方式读取)\tRead2TXT 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 /// 描述: (示例) 读取服务器文件数据(按照txt方式读取) /// 编写者： yanghaoran /// 编写日期: 20241030 /// 入参：\t/// 出参: /// d ##class(LISService.DataShare.LISTool).OutPut2TXT() ClassMethod Read2TXT() { /// windows路径为 盘符+\u0026#34;\\\u0026#34; (\u0026#34;D:\\Test.txt\u0026#34;) /// Linux路径为 \u0026#34;/\u0026#34; (/dthealth/细菌导入模板.csv) s logName=\u0026#34;/dthealth/app/dthis/imedicallis/imedicallis/tmp/File/细菌导入模板.csv\u0026#34; s file=##class(%File).%New(logName) s status=file.Open(\u0026#34;RU\u0026#34;) i status\u0026#39;=1 d file.Close() w status q \u0026#34;\u0026#34; set AllStr = file.Read(, .sc) Quit $$$OK } 获取互认数据\tGetData 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 /// =============================获取互认数据=============================/// /// 获取互认数据 /// dbo.CFBTHISData /// Input:互认系统代码，医院代码，数据类型，代码 /// Outpue:对照代码，对照名称，对照主键 /// w ##class(LISService.DataShare.LISData).GetData(\u0026#34;\u0026#34;,\u0026#34;\u0026#34;,\u0026#34;SP\u0026#34;,\u0026#34;SP015\u0026#34;) ClassMethod GetData(fDataType, fCode, HospitalCode, SYSCode) { s fDataType=$g(fDataType),fCode=$g(fCode) s ret=\u0026#34;\u0026#34; i \u0026#39;$l(fDataType) q ret i \u0026#39;$l(fCode) q ret s HospitalCode=$g(HospitalCode) i \u0026#39;$l(HospitalCode) s HospitalCode=\u0026#34;\u0026#34; s SYSCode=$g(SYSCode) i \u0026#39;$l(SYSCode) s SYSCode=\u0026#34;\u0026#34; i \u0026#39;$d(^dbo.CFBTHISDataI(\u0026#34;IndexMaster\u0026#34;,fDataType,fCode,SYSCode,HospitalCode)) q ret s HISDataCode=$o(^dbo.CFBTHISDataI(\u0026#34;IndexMaster\u0026#34;,fDataType,fCode,SYSCode,HospitalCode,\u0026#34;\u0026#34;)) s HISDataDR=$o(^dbo.CFBTHISDataI(\u0026#34;IndexMaster\u0026#34;,fDataType,fCode,SYSCode,HospitalCode,HISDataCode,\u0026#34;\u0026#34;)) s HISDataData=$g(^dbo.CFBTHISDataD(HISDataDR)) s HISDataCode=$lg(HISDataData,6) s HISDataName=$lg(HISDataData,8) s HISDataID=$lg(HISDataData,7) s ret=$lb(HISDataCode,HISDataName,HISDataID) q ret } /// 更新互认数据 /// d ##class(LISService.Problem.QryMethod).UpdCFBTHISData(\u0026#34;\u0026#34;, DataType, DataCode, SYSCode, HospitalCode, HISDataCode, HISDataID, HISDataName) ClassMethod UpdCFBTHISData(RowID, DataType, DataCode, SYSCode, HospitalCode, HISDataCode, HISDataID, HISDataName) As %String { s RowID=$g(RowID),DataType=$g(DataType),DataCode=$g(DataCode),SYSCode=$g(SYSCode),HospitalCode=$g(HospitalCode),HISDataCode=$g(HISDataCode),HISDataID=$g(HISDataID),HISDataName=$g(HISDataName) ;s ^YHR(\u0026#34;UpdCFBTHISData\u0026#34;)=$lb(RowID,DataType,DataCode,SYSCode,HospitalCode,HISDataCode,HISDataID,HISDataName) s RetValue=0 i \u0026#39;$l(HospitalCode) q \u0026#34;医院代码为空\u0026#34; i \u0026#39;$l(SYSCode) q \u0026#34;互认系统代码为空\u0026#34; i \u0026#39;$l(DataType) q \u0026#34;互认类型为空\u0026#34; i $l(DataCode),\u0026#39;$l(RowID) s RowID=$o(^dbo.CFBTHISDataI(\u0026#34;IndexDataCode\u0026#34;,HospitalCode,SYSCode,DataType,DataCode,\u0026#34;\u0026#34;)) s RowIDBak=\u0026#34;\u0026#34; i $l(RowID),$l(DataCode) s RowIDBak=$o(^dbo.CFBTHISDataI(\u0026#34;IndexDataCode\u0026#34;,HospitalCode,SYSCode,DataType,DataCode,\u0026#34;\u0026#34;)) i $l(RowIDBak),RowIDBak\u0026#39;=RowID q \u0026#34;存在相同代码数据\u0026#34; i $l(RowID),$d(^dbo.CFBTHISDataD(RowID)) { s obj=##Class(dbo.CFBTHISData).%OpenId(RowID) }else{ s obj=##Class(dbo.CFBTHISData).%New() } If \u0026#39;$IsObject(obj) q 100 s obj.DataType=DataType s obj.DataCode=DataCode s obj.SYSCode=SYSCode s obj.HospitalCode=HospitalCode s obj.HISDataCode=HISDataCode s obj.HISDataID=HISDataID s obj.HISDataName=HISDataName s sc=obj.%Save() If ($SYSTEM.Status.IsOK(sc)) { s RetValue=1 } else { s RetValue=$SYSTEM.Status.GetErrorText(sc) } Quit RetValue } /// 导入互认数据 /// d ##class(LISService.Problem.QryMethod).leadIntoData() ClassMethod leadIntoData() { s Split=\u0026#34;$$\u0026#34; s SYSCode=\u0026#34;\u0026#34; s HospitalCode=\u0026#34;\u0026#34; s DataType=\u0026#34;SP\u0026#34; /// 系统代码集 s SYSCodes=\u0026#34;CS1$$CS2\u0026#34; /// 对照代码集 s HISDataCodes=\u0026#34;DZ1$$DZ2\u0026#34; /// 对照名称集 s HISDataNames=\u0026#34;对照1$$对照2\u0026#34; /// 对照主键集 s HISDataIDs=\u0026#34;\u0026#34; for i=1:1:$l(SYSCodes,Split) d .s SYSCode=$p(SYSCodes,Split,i) .s HISDataCode=$p(HISDataCodes,Split,i) .s HISDataName=$p(HISDataNames,Split,i) .s HISDataID=$p(HISDataIDs,Split,i) .i \u0026#39;$l(SYSCode) q .try{d ##class(LISService.Problem.QryMethod).UpdCFBTHISData(\u0026#34;\u0026#34;, DataType, DataCode, SYSCode, HospitalCode, HISDataCode, HISDataID, HISDataName)}catch{} q } PDF报告转base64\tGetBase64ByDRMTHD 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 /// =============================PDF报告转base64=============================/// /// 通过报告主键转PDFBase64 /// ReportDR:报告主键 /// w ##Class(LISService.DataShare.LISTool).GetBase64ByDRMTHD(\u0026#34;187\u0026#34;) ClassMethod GetBase64ByDRMTHD(ReportDR, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, Sessions, Output RowCount As %String) As %String { s ReportDR=$g(ReportDR) s Ret=\u0026#34;\u0026#34;,PDFFileString=\u0026#34;\u0026#34; i $d(^dbo.RPVisitNumberReportFileI(\u0026#34;IndexMater\u0026#34;,##Class(LIS.Util.Common).IndexData(ReportDR))) d .s FileInfoID=$o(^dbo.RPVisitNumberReportFileI(\u0026#34;IndexMater\u0026#34;,##Class(LIS.Util.Common).IndexData(ReportDR),\u0026#34;\u0026#34;)) .;s PDFPath=$lg($g(^dbo.RPVisitNumberReportFileD(FileInfoID)),6)_\u0026#34;.zip\u0026#34; .s PDFPath=$lg($g(^dbo.RPVisitNumberReportFileD(FileInfoID)),6) s LisSoap=##class(LISReportService.LISReportServiceSoap).%New() s PDFFileString=LisSoap.GetServerFileBase64(PDFPath) q PDFFileString } 通用工具类 不足N位补0\tZeroPadding 1 2 3 4 5 /// 不足N位补0 ClassMethod ZeroPadding(target, num) { q $tr($j(target, num), \u0026#34; \u0026#34;, \u0026#34;0\u0026#34;) } 获取客户端IP\tGetOutLocalIP 1 2 3 4 5 /// 获取客户端IP ClassMethod GetOutLocalIP() As %String { q ##class(%SYSTEM.Process).ClientIPAddress() } 获取服务器本地IP\tGetInLocalIP 1 2 3 4 5 /// 获取服务器本地IP ClassMethod GetInLocalIP() As %String { q $p($zu(54,13,$zu(54,0)),\u0026#34;,\u0026#34;,1 ) } 获取当前命名空间物理路径\tGetNameSpacePath 1 2 3 4 5 /// 获取当前命名空间物理路径 ClassMethod GetNameSpacePath() As %String { q ##class(%Library.File).NormalizeDirectory(\u0026#34;\u0026#34;) } 获取License信息\tShowLicenseInfo 1 2 3 4 5 /// 获取License信息 ClassMethod ShowLicenseInfo() As %Boolean { d ##class(%SYSTEM.License).ShowCounts() } 判断文件夹是否存在\tIsDirectoryExists 1 2 3 4 5 /// 判断文件夹是否存在 ClassMethod IsDirectoryExists(filePath) As %Boolean { q ##class(%File).DirectoryExists(filePath) } 文件夹不存在创建文件夹\tCreateNotExistDir 1 2 3 4 5 6 /// 文件夹不存在创建文件夹 ClassMethod CreateNotExistDir(filePath) As %Boolean { if (\u0026#39;(##class(%File).DirectoryExists(filePath))){ d ##class(%File).CreateNewDir(filePath, \u0026#34;\u0026#34;) } 获取时间多少秒之前的时间\tGetMinutesAgoTime 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 /// 获取时间多少秒之前的时间 /// w ##class(YHR.Tool.Method1).GetMinutesAgoTime($zdt($h,8),7200) /// w ##class(YHR.Tool.Method1).GetMinutesAgoTime(\u0026#34;20241125 10:04:00\u0026#34;,7200) ClassMethod GetMinutesAgoTime(DateTime, timeDiff) { try{ s Date=$zdh($p(DateTime,\u0026#34; \u0026#34;,1),8) s Time=$zth($p(DateTime,\u0026#34; \u0026#34;,2))}catch{s (Date,Time)=\u0026#34;\u0026#34;} i \u0026#39;$l(Date) q \u0026#34;\u0026#34; s DateSince=$fn(timeDiff/86400,\u0026#34;\u0026#34;,0) s TimeSince=(timeDiff#86400) i Time\u0026gt;=TimeSince d .s Date=$zd(Date-DateSince,8) .s Time=$zt(Time-TimeSince) e d .s Date=$zd(Date-DateSince-1,8) .s Time=$zt(86400+Time-TimeSince) q Date_\u0026#34; \u0026#34;_Time } 编程小工具 初始化入参变量 1 2 3 4 5 6 7 8 9 10 11 12 13 14 /// w ##class(Z.TEST.TEST).GetInit(\u0026#34;RegNo, IndexSCode, TestSets, Days, HospitalDR, fVisitNumberNo\u0026#34;) ClassMethod GetInit(str) { s str=$g(str) i \u0026#39;$l(str) q \u0026#34;\u0026#34; s OutPut=\u0026#34;s \u0026#34; f i=1:1:$l(str,\u0026#34;,\u0026#34;) { s stri=$p(str,\u0026#34;,\u0026#34;,i) s stri=$tr(stri,\u0026#34; \u0026#34;) s OutPut=OutPut_stri_\u0026#34;=$g(\u0026#34;_stri_\u0026#34;),\u0026#34; } s OutPut=$e(OutPut,1,*-1) q OutPut } ","date":"2025-09-03T00:00:00Z","image":"https://work.717170.xyz/img/title.jpg","permalink":"https://work.717170.xyz/p/%E9%80%9A%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB%E6%96%B9%E6%B3%95-e371126151/","title":"通用工具类方法"}]